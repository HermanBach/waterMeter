// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using waterMeter.Data;

#nullable disable

namespace waterMeter.Migrations
{
    [DbContext(typeof(waterMeterContext))]
    [Migration("20231128180053_editMeterReplacementHistory")]
    partial class editMeterReplacementHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("waterMeter.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("waterMeter.Models.Meter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FactoryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastVerification")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextVerification")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Meter");
                });

            modelBuilder.Entity("waterMeter.Models.MeterReplacementHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NewMeterId")
                        .HasColumnType("int");

                    b.Property<int?>("OldMeterId")
                        .HasColumnType("int");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NewMeterId");

                    b.HasIndex("OldMeterId");

                    b.ToTable("MeterReplacementHistory");
                });

            modelBuilder.Entity("waterMeter.Models.MetersData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TestimonyDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("MetersData");
                });

            modelBuilder.Entity("waterMeter.Models.Apartment", b =>
                {
                    b.HasOne("waterMeter.Models.Meter", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("waterMeter.Models.MeterReplacementHistory", b =>
                {
                    b.HasOne("waterMeter.Models.Meter", "NewMeter")
                        .WithMany()
                        .HasForeignKey("NewMeterId");

                    b.HasOne("waterMeter.Models.Meter", "OldMeter")
                        .WithMany()
                        .HasForeignKey("OldMeterId");

                    b.Navigation("NewMeter");

                    b.Navigation("OldMeter");
                });

            modelBuilder.Entity("waterMeter.Models.MetersData", b =>
                {
                    b.HasOne("waterMeter.Models.Meter", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });
#pragma warning restore 612, 618
        }
    }
}
